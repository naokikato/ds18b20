{"entries":[{"timestamp":1727667824344,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"ds18b20.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":218,"start2":218,"length1":67,"length2":44}]},{"type":"added","filename":"ds18b20.ts","value":"/**\n* このファイルを使って、独自の関数やブロックを定義してください。\n* 詳しくはこちらを参照してください：https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace IMLwatertemp {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function getWaterTemp(): number {\n        return readTemperature()\n    }\n\n    let temperature = 0\n\n    // DS18B20センサーが接続されているピン (GROVEインタフェースの1ピンを指定)\n    let oneWirePin = DigitalPin.P0\n\n    // センサーのROMコマンドと機能コマンド\n    let CONVERT_T = 0x44\n    let READ_SCRATCHPAD = 0xBE\n\n    // DS18B20に1-Wireリセット信号を送る関数\n    function oneWireReset(): boolean {\n        pins.digitalWritePin(oneWirePin, 0)\n        control.waitMicros(500)  // ラインを低く維持\n        pins.digitalWritePin(oneWirePin, 1)\n        control.waitMicros(70)   // マスタがラインをリリース\n        let presence = pins.digitalReadPin(oneWirePin)\n        control.waitMicros(500)\n        return presence == 0\n    }\n\n    // DS18B20に1ビットを書き込む関数\n    function oneWireWriteBit(bit: number) {\n        pins.digitalWritePin(oneWirePin, 0)\n        control.waitMicros(bit == 1 ? 10 : 60)  // 1の場合は短く、0の場合は長く維持\n        pins.digitalWritePin(oneWirePin, 1)\n        control.waitMicros(bit == 1 ? 55 : 5)   // 1の場合は長くリリース、0の場合は短くリリース\n    }\n\n    // DS18B20に1バイトを書き込む関数\n    function oneWireWriteByte(byte: number) {\n        for (let i = 0; i < 8; i++) {\n            oneWireWriteBit(byte & 0x01)\n            byte = byte >> 1\n        }\n    }\n\n    // DS18B20から1ビットを読み取る関数\n    function oneWireReadBit(): number {\n        pins.digitalWritePin(oneWirePin, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(oneWirePin, 1)\n        control.waitMicros(12)\n        let bit = pins.digitalReadPin(oneWirePin)\n        control.waitMicros(50)\n        return bit\n    }\n\n    // DS18B20から1バイトを読み取る関数\n    function oneWireReadByte(): number {\n        let byte = 0\n        for (let i = 0; i < 8; i++) {\n            byte = byte | (oneWireReadBit() << i)\n        }\n        return byte\n    }\n\n    // 温度を測定する関数\n    function readTemperature(): number {\n        // 1-Wireリセット\n        if (!oneWireReset()) {\n            basic.showString(\"Error\")\n            return -999  // センサーが見つからない場合のエラーハンドリング\n        }\n\n        // 温度変換コマンドを送信\n        oneWireWriteByte(0xCC)  // ROMスキップコマンド\n        oneWireWriteByte(CONVERT_T)\n\n        // 温度計算の完了まで待つ\n        basic.pause(750)  // 温度変換に最大750msかかる\n\n        // 1-Wireリセット\n        if (!oneWireReset()) {\n            basic.showString(\"Error\")\n            return -999\n        }\n\n        // スクラッチパッドを読み取る\n        oneWireWriteByte(0xCC)  // ROMスキップコマンド\n        oneWireWriteByte(READ_SCRATCHPAD)\n\n        let temp_LSB = oneWireReadByte()\n        let temp_MSB = oneWireReadByte()\n\n        // 温度データを計算（12ビット解像度）\n        let temp = (temp_MSB << 8) | temp_LSB\n\n        // 負の温度に対応\n        if (temp > 0x7FF) {\n            temp = temp - 4096\n        }\n\n        // 温度値を0.0625度の単位で返す\n        return temp * 0.0625\n    }\n}\n\n\n\n"}]},{"timestamp":1727668403061,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"><block "],[1,"type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block "],[0,"type=\"de"]],"start1":77,"start2":77,"length1":16,"length2":65},{"diffs":[[0,"ver\" x=\""],[-1,"0"],[1,"225"],[0,"\" y=\""],[1,"2"],[0,"0\"></blo"]],"start1":151,"start2":151,"length1":22,"length2":25}]},{"type":"edited","filename":"ds18b20.ts","patch":[{"diffs":[[0,"=\"\""],[-1," block=\"水温計\""],[0,"\nnam"]],"start1":237,"start2":237,"length1":20,"length2":8},{"diffs":[[0,"p {\n"],[-1,"\n    // DS18B20センサーが接続されているピン (GROVEインタフェースの1ピンを指定)\n    let oneWirePin = DigitalPin.P0\n\n    // センサーのROMコマンドと機能コマンド\n    let CONVERT_T = 0x44\n    let READ_SCRATCHPAD = 0xBE\n\n    //% block\n    //% block=\"水温 %pin\"\n    //% weight=100   \n    export function getWaterTemp(pin: DigitalPin): number {\n        oneWirePin = pin\n        return (readTemperature()*10.0)/10.0\n    }"],[1,"    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function getWaterTemp(): number {\n        return readTemperature()\n    }\n\n    let temperature = 0\n\n    // DS18B20センサーが接続されているピン (GROVEインタフェースの1ピンを指定)\n    let oneWirePin = DigitalPin.P0\n\n    // センサーのROMコマンドと機能コマンド\n    let CONVERT_T = 0x44\n    let READ_SCRATCHPAD = 0xBE"],[0,"\n\n  "]],"start1":263,"start2":263,"length1":375,"length2":498}]}]},{"timestamp":1727668975025,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_forever\" x=\"0\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":62}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":33}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":248,"start2":248,"length1":52,"length2":8},{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":268,"start2":268,"length1":21,"length2":17}]},{"type":"edited","filename":"ds18b20.ts","patch":[{"diffs":[[0,"urn "],[-1,"Math.round"],[0,"(rea"]],"start1":607,"start2":607,"length1":18,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1727667824343,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"DS18B20\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727669539787}